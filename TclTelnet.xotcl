package require XOTcl;namespace import ::xotcl::*

Class TclTelnet -slots {
    Attribute Host
    Attribute Port -default 23 -type integer
    Attribute Print -default 0 -type boolean
}

TclTelnet instproc init {} {
    my set _eventID ""
    my set _connected 0
    my _initScreen
    my _initEscapeCodeRegexp
}

TclTelnet instproc destroy {} {
    catch {close [my set _channel]}
    
    [self class] instdestroy [self]
}

TclTelnet instproc connect {host {port 23}} {
    my Host $host
    my Port $port
    my set _channel [socket $host $port]
    my set _connected 1
    fconfigure [my set _channel] -blocking 0 -buffering none -translation binary
    fileevent [my set _channel] readable [myproc _update [my set _channel]]
}

TclTelnet instproc disconnect {} {
    catch {close [my set _channel]}
    my set _connected 0
}

TclTelnet instproc isConnected {} {
    return [my set _connected]
}

TclTelnet instproc send {message} {
    puts -nonewline [my set _channel] $message
}

TclTelnet instproc sendLine {message} {
    puts -nonewline [my set _channel] "$message\r"
}

TclTelnet instproc press {key} {
    set key [string tolower $key]
    
    if {[regexp {ctrl_([a-z])} $key dummy char]} {
        set index [string first $char abcdefghijklmnopqrstuvwxyz]
        incr index
        set hex [format %02x $index]
        my send [subst \\x$hex]
    } else {
        switch -- $key {
            up {my send "\x1b\x4f\x41"}
            down {my send "\x1b\x4f\x42"}
            right {my send "\x1b\x4f\x43"}
            left {my send "\x1b\x4f\x44"}
            home {my send "\x1b\x5b\x31\x7e"}
            insert {my send "\x1b\x5b\x32\x7e"}
            delete {my send "\x1b\x5b\x33\x7e"}
            end {my send "\x1b\x5b\x34\x7e"}
            pageup {my send "\x1b\x5b\x35\x7e"}
            pagedown {my send "\x1b\x5b\x36\x7e"}
            backspace -
            back {my send "\x7f"}
            default {
                error "[self] press : bad key '$key'"
            }
        }
    }
}

TclTelnet instproc _initScreen {} {
    my array unset _screen
    
    # bbs : width * height = 80 * 24
    for {set y 1} {$y <= 24} {incr y} {
        for {set x 1} {$x <= 80} {incr x} {
            my array set _screen [list $x,$y " "]
        }
    }
    
    my set _x 1
    my set _y 1
}

TclTelnet instproc update {{timeout 1000}} {
    my set _waiting 0
    after cancel [my set _eventID]
    my set _eventID [after $timeout [list [self] set _waiting 0]]
    my vwait _waiting
}

TclTelnet instproc waitUntilChange {{timeout 5000}} {
    set t1 [clock clicks -milliseconds]
    while 1 {
        set s1 [my array get _screen]
        my update
        set s2 [my array get _screen]
        if {$s1 != $s2} {return}
        # puts "[self] waitUntilChange : not changed, content = \n$content\nkeeping waiting...."
        set t2 [clock clicks -milliseconds]
        if {[expr $t2 - $t1] > $timeout} {return}
    }
}

TclTelnet instproc waitForExpectContent {re {line ""} {timeout 5000}} {
    set t1 [clock clicks -milliseconds]
    while 1 {
        if {$line == ""} {
            set content [my printScreen]
        } else {
            set content [my getLine $line]
        }
        if {[regexp $re $content]} {return}
        # puts "[self] waitForExpectContent : not match, keep waiting....\nre = $re, content = \n$content"
        my update
        
        set t2 [clock clicks -milliseconds]
        if {[expr $t2 - $t1] > $timeout} {return}
    }
}

TclTelnet instproc _update {channel} {
    if {![eof $channel]} {
        set data [read $channel]
        if {[string trim $data] == ""} {return}
        
        set data [my _cleanColorCode $data]
        set data [my _cleanUnusedCode $data]
        
        # for hex debug
        # puts stderr [hexdump $data]
        
        while 1 {
            set char [string index $data 0]
            
            if {$char == "\x1b"} {
                if {[regexp ^[my set _cursorLocateEscapeCodeRegexp] $data dummy y x]} {
                    if {[string is integer -strict $x] && [string is integer -strict $y]} {
                        my set _x $x
                        my set _y $y
                    } else {
                        my set _x 1
                        my set _y 1
                    }
                    regsub [my set _cursorLocateEscapeCodeRegexp] $data "" data
                } elseif {[regexp ^[my set _cursorControlEscapeCodeRegexp] $data dummy value control]} {
                    switch -- $control {
                        A {my incr _y -$value}
                        B {my incr _y $value}
                        C {my incr _x $value}
                        D {my incr _x -$value}
                    }
                    regsub [my set _cursorControlEscapeCodeRegexp] $data "" data
                } elseif {[regexp ^[my set _screenCleanEscapeCodeRegexp] $data]} {
                    my _initScreen
                    regsub [my set _screenCleanEscapeCodeRegexp] $data "" data
                } elseif {[regexp ^[my set _EOLEscapeCodeRegexp] $data]} {
                    for {set x [my set _x]} {$x <= 80} {incr x} {
                        my array set _screen [list $x,[my set _y] " "]
                    }
                    regsub [my set _EOLEscapeCodeRegexp] $data "" data
                } else {
                    set data [string range $data 1 end]
                }
            } else {
                if {$char == "\r"} {
                    my set _x 1
                } elseif {$char == "\n"} {
                    my incr _y
                } elseif {$char == "\b"} {
                    my incr _x -1
                } else {
                    my array set _screen [list [my set _x],[my set _y] $char]
                    my incr _x
                }
                set data [string range $data 1 end]
            }
            
            if {$data == ""} {break}
        }
    } else {
        close $channel
        my set _connected 0
    }
    my set _waiting 0
}

TclTelnet instproc _initEscapeCodeRegexp {} {
    my set _escapeCode "\x1b"
    
    my set _cursorLocateEscapeCodeRegexp [my set _escapeCode]
    my append _cursorLocateEscapeCodeRegexp {\[(?:([0-9]+);([0-9]+))?[Hf]}
    
    my set _cursorControlEscapeCodeRegexp [my set _escapeCode]
    my append _cursorControlEscapeCodeRegexp {\[([0-9]+)([ABCD])}
    
    my set _screenCleanEscapeCodeRegexp [my set _escapeCode]
    my append _screenCleanEscapeCodeRegexp {\[2J}
    
    my set _EOLEscapeCodeRegexp [my set _escapeCode]
    my append _EOLEscapeCodeRegexp {\[K}
}

TclTelnet instproc _cleanColorCode {data} {
    append re [my set _escapeCode] {\[[0-9;]*m}
    regsub -all $re $data "" result
    return $result
}

TclTelnet instproc _cleanUnusedCode {data} {
    append re [my set _escapeCode] {\[[su]}
    regsub -all $re $data "" result
    return $result
}

TclTelnet instproc getLine {number} {
    set result ""
    for {set x 1} {$x <= 80} {incr x} {
        foreach {dummy char} [my array get _screen $x,$number] {break}
        append result $char
    }
    
    set result [encoding convertfrom cp950 $result]
    return $result
}

TclTelnet instproc getCurrentLine {} {
    set result ""
    for {set x 1} {$x <= 80} {incr x} {
        foreach {dummy char} [my array get _screen $x,[my getCurrentLineNumber]] {break}
        append result $char
    }
    
    set result [encoding convertfrom cp950 $result]
    return $result
}

TclTelnet instproc getCurrentLineNumber {} {
    return [my set _y]
}

TclTelnet instproc printScreen {} {
    set result ""
    for {set y 1} {$y <= 24} {incr y} {
        append result [my getLine $y]
        append result \n
    }
    
    set result [string trimright $result \n]
    
    if {[my Print]} {
        puts -nonewline $result
    }
    return $result
}
